# ======= App Info =======
spring.application.name=feed-backend
server.port=8085

# ======= Redis =======
spring.data.redis.host=redis.databases.svc.cluster.local
spring.data.redis.port=6379

# ======= Kafka =======
spring.kafka.bootstrap-servers=kafka-service.databases.svc.cluster.local:9092
spring.kafka.consumer.group-id=feed-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.value.default.type=com.example.feed_backend.kafka.PostCreatedEvent

# ======= Services =======
user.service.url=http://user-service.rm-photo-app.svc.cluster.local:8080/api/users
follow.service.url=http://follow-service.rm-photo-app.svc.cluster.local:8083/api/follow

# ────── Monitoring ──────
 # Enable actuator endpoints
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# Set actuator to same port as app
management.server.port=8085

# ────── Tracing and Zipkin ──────
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://zipkin.zipkin.svc.cluster.local:9411/api/v2/spans
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]